#!/usr/bin/env bash

set -e

detect_package_manager() {
    type pacman 2>/dev/null >/dev/null && echo pacman
    type apt 2>/dev/null >/dev/null && echo apt
}

package_manager="$(detect_package_manager)" 
case "$package_manager" in
 apt) 
      sudo bash -c "cat > /etc/apt/sources.list.d/qutebrowser.list" <<_
# We want the experimental version of Qt, so that we get QWebEngine
deb http://ftp.debian.org/debian experimental main
_

      sudo apt update
      sudo apt install -t experimental\
          python3-pyqt5 python3-pyqt5.qtwebkit python3-pyqt5.qtquick \
          python-tox python3-sip python3-dev
      ;;
   *) echo >&2 "Don't know how to install qutebrowser using '$package_manager'"
      exit 1
      ;;
esac

base="$(cd "$(dirname $0)"; pwd)"
install_dir="$base/.build/qutebrowser"
mkdir -p "$install_dir"
cd "$install_dir"
[ -e .git ] || git clone https://github.com./qutebrowser/qutebrowser .

(cd "$install_dir"; tox -r -e mkvenv)

cat > "$base/bin/qutebrowser" <<_
#!/bin/bash

# DO NOT EDIT: Generated by "$0"

# The current implementation of qutebrowser re-writes the config each run,
# removing comment, and adding it's own. This makes it difficult to figure out
# what's mine, and what's theirs. We get around this by copying our own config
# each time.
#
export XDG_CONFIG_DIR="${XDG_CONFIG_DIR:-$HOME/.config}"
qute_conf="$XDG_CONFIG_DIR/qutebrowser/qutebrowser.conf"
[ -f "\$qute_conf.template" ] &&
    cp "\$qute_conf.template" "\$qute_conf"

"$install_dir/.venv/bin/python3" -m qutebrowser "$@"
_

chmod +x "$base/bin/qutebrowser"
