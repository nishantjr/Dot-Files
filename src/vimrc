map gX :!chmod +x %<CR>
"
" Set up swap so that it's not in git's way
silent !mkdir -p ~/.cache/vim/swap
set dir=~/.cache/vim/swap//,/var/tmp/vim/swap//
set nobackup

" information stored in viminfo
set viminfo=
set viminfo+='0   " No marks remembered
set viminfo+=<0   " No registers

set autoindent
set shiftwidth=4
set noexrc
set nowarn
set cedit=

set textwidth=80
set colorcolumn=+1
highlight ColorColumn ctermbg=7

set display+=lastline
set display+=uhex
set modeline
set hidden
set hlsearch ignorecase smartcase
set splitbelow
set noequalalways
set tags=./tags;
set noicon
set notitle
set wildmode=longest,list
set matchpairs=(:),{:},[:],<:>
set iskeyword=@,48-57,_,192-255
set ruler
set clipboard=unnamed
set fileformats=unix
set encoding=utf-8 fileencoding=utf-8 termencoding=utf-8

set nojoinspaces formatoptions=qn

" Bash considers !! commands to be non-interactive shells,
" so ensure that we get our shell functions (though not aliases).
let $BASH_ENV=$HOME . "/.bashrc"

filetype plugin on
syntax off

" ===== Colors ========================================================
" Available ctermfg colours, in DarkFoo and LightFoo versions:
" Black Blue Green Cyan Red Magenta Yellow Grey White

" editing
highlight Search cterm=bold ctermfg=4 ctermbg=7
highlight Pmenu ctermbg=NONE ctermfg=4
highlight PmenuSel ctermbg=NONE ctermfg=4 cterm=reverse

" syntax
highlight Comment ctermfg=Gray
highlight Constant ctermfg=DarkBlue
highlight Special ctermfg=Black
highlight Identifier ctermfg=DarkBlue
highlight Statement ctermfg=Black
highlight PreProc ctermfg=Black
highlight Type ctermfg=Black

" diffs
highlight diffAdded	ctermfg=DarkBlue
highlight diffRemoved	ctermfg=DarkRed
highlight diffFile	ctermfg=DarkGreen
highlight diffLine	ctermfg=DarkYellow

" spelling
highlight SpellBad	ctermfg=DarkRed ctermbg=none
highlight SpellCap	ctermfg=none ctermbg=none
highlight SpellRare	ctermfg=none ctermbg=none
highlight SpellLocal	ctermfg=none ctermbg=none

" gn - turn off search highlighting
map gn :nohlsearch<CR>

" ^N/^P - move to next/previous file
map  :next
map  :previous

" ^W - instant move to next window
map  

" Make 'q' do nothing, so that when it prefixes a non-mapped key,
" it just does what that key does. Ideally it should swallow the
" next char, but I don't know how to do that.
map q :<CR>
" qq - quit
" qQ - force quit
" qa - force quit all
" qA - force quit all
map qq :q
map qQ :q!
map qa :qa
map qA :qa!

" ===== s/S commands
" By default s and S are synonyms for cl and cc.

" s/S - save and save all
map s :w<CR>
map S :wa<CR>

" gd - enable dos mode, and reload file
map gd :set fileformats=unix,dos:e

" gg - show ascii/unicode value of char under cursor
noremap gg ga

" Word processing mode
map gW :setlocal wrap lbr spell spelllang=en_us<CR>:echo "Word Processor mode."<CR>

" go - sort (order) this paragraph
map go {!}sort

" esc-s: spell mode
map gs :setlocal spell spelllang=en_us<CR>

"""""" gv - Version Control commands """""""""""""""""""""""

command! Scratch :new | :set buftype=nofile bufhidden=delete

" gvd - diff current file
map gvd :Scratch<CR>:r!git diff #<CR>:runtime syntax/diff.vim<CR>

" gvD - diff all files from current dir down
map gvD :Scratch<CR>:r!dif<CR>:runtime syntax/diff.vim<CR>

" gvb - blame current file
map gvb :Scratch<CR>:r!blame #<CR>

" gvl - log current file
map gvl :Scratch<CR>:r!log #<CR>

" ^I - insert (really append) stuff
map <TAB>d	a<CR><CR><ESC>k!!i-date<CR>kJJ		" date (YYYY-MM-DD)
map <TAB>t	a<CR><CR><ESC>k!!i-time<CR>kJJ		" date and time
map <TAB>T	a<CR><CR><ESC>k!!date +\%H:\%M<CR>kJJ	" time only
map <TAB><C-T>	a<CR><CR><ESC>k!!date +\%H:\%M<CR>kJJ	" time only

" TODO: Checkout iabbr and abbr

" ===== Tab Settings ==================================================

" Use spaces instead of tabs for any files that have no tabs
" near the beginning (in the first thousand lines)
function! s:ExpandTabCheck()
    let s:tab = search("\t", "n")", 1000)
    if s:tab == 0
	setlocal expandtab
    endif
endfunction
autocmd BufEnter * call s:ExpandTabCheck()

" ===== Special Characters ===========================================

" Digraph input: Ctrl-K followed by two chars.
digraph \|- 8866

" Commonly used digraphs to remember:
" /\=√ó  :-=√∑
" FA=‚àÄ  TE=‚àÉ  AN=‚àß  OR=‚à®  .:=‚à¥
" (-=‚àà  -)=‚àã
" 00=‚àû
" greek ends in *: G*=Œì  g*=Œ≥
" s/S = superscript/subscript: 1s=‚ÇÅ 2S=¬≤
" Also see: http://www.alecjacobson.com/weblog/?p=443

" ===== LaTeX helpers ================================================
" Build a aligned environment around the cursor
iabbr $$a $$\begin{aligned}<Return>\end{aligned}$$<Esc>k$a
iabbr ALIGNED \begin{aligned}<Return>\end{aligned}<Esc>k$a
iabbr CASES \begin{cases}<Return>\end{cases}<Esc>k$a
iabbr MATRIX \begin{bmatrix}<Return>\end{bmatrix}<Esc>k$a

iabbr BB  \mathbb
iabbr CAL \mathcal
iabbr SCR \mathscr
iabbr TT  \text

iabbr .:  \therefore

" Use this in aligned env for typesetting the reason for a statement
iabbr COZ &\quad\ldots&\text{

iabbr IMPLIES \Longrightarrow
iabbr IFF \Longrightleftarrow
iabbr INV ^{-1}
iabbr normgroupof \trianglelefteq

iabbr eps \epsilon
iabbr PHI \varphi
iabbr ISO \cong

iabbr bbC \mathbb C
iabbr bbN \mathbb Q
iabbr bbR \mathbb R
iabbr bbZ \mathbb Z

function! s:abbrSubscripts(letter_string)
    let letters = split(a:letter_string, '\zs')
    let subscripts = split("0123ijkmn", '\zs')
    for l in letters
	for s in subscripts
	    execute ('iabbr '. l . s . ' ' .l. '_'.s)
	endfor
    endfor
endfunction

call s:abbrSubscripts("bcpqrxyz")
call s:abbrSubscripts("BCGXYZ")

" Automated deduction
iabbr TERMALG \bigunion T_{\sigma(Y)}
iabbr REWRITESTO {\to_{R/B}^{*}}
